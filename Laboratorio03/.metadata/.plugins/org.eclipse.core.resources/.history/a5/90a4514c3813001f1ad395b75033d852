//Laboratorio Nro 2 - Ejercicio1
//Autor: Dayana Katherine Cayo Lahuana 
package ejercicioPropuesto01;
import java.util.*;
public class DemoBatalla {

	public static void main(String[] args) {
		Nave [] misNaves = new Nave[3];  
		Scanner sc = new Scanner(System.in);  

		String nomb, col;  
		int fil, punt;          
		boolean est;  

		for (int i = 0; i < misNaves.length; i++) {  
			System.out.println("Nave " + (i+1));  
			System.out.print("Nombre: ");            
			nomb = sc.next();  
			System.out.println("Fila ");            
			fil = sc.nextInt();  
			System.out.print("Columna: ");            
			col = sc.next();  
			System.out.print("Estado: ");            
			est = sc.nextBoolean();            
			System.out.print("Puntos: ");            
			punt = sc.nextInt();  

			misNaves[i] = new Nave(); //Se crea un objeto Nave y se asigna su referencia a misNaves            

			misNaves[i].setNombre(nomb);            
			misNaves[i].setFila(fil);            
			misNaves[i].setColumna(col);            
			misNaves[i].setEstado(est);            
			misNaves[i].setPuntos(punt);  
		}  

		System.out.println("\nNaves creadas:");  
		mostrarNaves(misNaves);            
		mostrarPorNombre(misNaves);            
		mostrarPorPuntos(misNaves);  
		System.out.println("\nNave con mayor número de puntos: " + mostrarMayorPuntos(misNaves));           
		//leer un nombre
		System.out.println("Que nombre quiere encontrar?");
		String nombre=sc.next();
		
		//mostrar los datos de la nave con dicho nombre, mensaje de “no encontrado” en caso contrario 
		int pos=busquedaLinealNombre(misNaves,nombre);
		mensaje(pos,misNaves);
		
		
		
		ordenarPorPuntosBurbuja(misNaves);
		mostrarNaves(misNaves);
		ordenarPorNombreBurbuja(misNaves);
		mostrarNaves(misNaves);
		
		//mostrar los datos de la nave con dicho nombre, mensaje de “no encontrado” en caso contrario
		pos=busquedaBinariaNombre(misNaves,nombre);
		mensaje(pos,misNaves);
		
		
		
		ordenarPorPuntosSeleccion(misNaves);
		mostrarNaves(misNaves);
		ordenarPorPuntosInsercion(misNaves);
		mostrarNaves(misNaves);
		ordenarPorNombreSeleccion(misNaves);
		mostrarNaves(misNaves);
		ordenarPorNombreInsercion(misNaves);
		mostrarNaves(misNaves);

	
	
	
	} 
	//metodo adicional para mostrar nave y mensaje despues de la busqueda
	static void mensaje(int pos, Nave misNaves []) {
		if (pos != -1) {
		    // Se encontró la nave, mostrar sus datos
		    Nave naveEncontrada = misNaves[pos];
		    System.out.println("Nombre: " + naveEncontrada.getNombre());
		    System.out.println("Fila: " + naveEncontrada.getFila());
		    System.out.println("Columna: " + naveEncontrada.getColumna());
		    System.out.println("Estado: " + naveEncontrada.getEstado());
		    System.out.println("Puntos: " + naveEncontrada.getPuntos());
		} else {
		    // No se encontró la nave con el nombre especificado
		    System.out.println("Nave no encontrada.");
		}
	}
	
	//Método para mostrar todas las naves public 
	static void mostrarNaves(Nave [] flota){      
		for (int i = 0; i < flota.length; i++) {
	        System.out.println("Nave " + (i + 1) + ":");
	        System.out.println("Nombre: " + flota[i].getNombre());
	        System.out.println("Fila: " + flota[i].getFila());
	        System.out.println("Columna: " + flota[i].getColumna());
	        System.out.println("Estado: " + flota[i].getEstado());
	        System.out.println("Puntos: " + flota[i].getPuntos());
	        System.out.println("--------------------------");
	    }
	}  

	//Método para mostrar todas  las naves de un nombre que se pide por teclado 
	public static void mostrarPorNombre(Nave [] flota){
		Scanner sc = new Scanner(System.in);
	    System.out.print("Ingrese el nombre de la nave que desea buscar: ");
	    String nombreBuscado = sc.next();

	    System.out.println("Naves con nombre '" + nombreBuscado + "':");
	    for (Nave nave : flota) {
	        if (nave.getNombre().equalsIgnoreCase(nombreBuscado)) {
	            System.out.println("Nombre: " + nave.getNombre());
	            System.out.println("Fila: " + nave.getFila());
	            System.out.println("Columna: " + nave.getColumna());
	            System.out.println("Estado: " + nave.getEstado());
	            System.out.println("Puntos: " + nave.getPuntos());
	            System.out.println("--------------------------");
	        }
	    }
	}  

	//Método para mostrar todas las naves con un número de puntos inferior o igual  
	//al número de puntos que se pide por teclado public 
	static void mostrarPorPuntos(Nave [] flota){  
		 Scanner sc = new Scanner(System.in);
		    System.out.print("Ingrese el número de puntos máximo: ");
		    int puntosMaximos = sc.nextInt();

		    System.out.println("Naves con puntos igual o inferiores a " + puntosMaximos + ":");
		    for (Nave nave : flota) {
		        if (nave.getPuntos() <= puntosMaximos) {
		            System.out.println("Nombre: " + nave.getNombre());
		            System.out.println("Fila: " + nave.getFila());
		            System.out.println("Columna: " + nave.getColumna());
		            System.out.println("Estado: " + nave.getEstado());
		            System.out.println("Puntos: " + nave.getPuntos());
		            System.out.println("--------------------------");
		        }
		    }
	}  

	//Método que devuelve la Nave con mayor número de Puntos 
	public static Nave mostrarMayorPuntos(Nave [] flota){
		 Nave naveMayorPuntos = flota[0]; 

		    for (int i = 1; i < flota.length; i++) {
		        if (flota[i].getPuntos() > naveMayorPuntos.getPuntos()) {
		            naveMayorPuntos = flota[i];
		        }
		    }

		    return naveMayorPuntos;
	}   
	
	//Método para buscar la primera nave con un nombre que se pidió por teclado
	public static int busquedaLinealNombre(Nave[] flota, String s){ 
		for (int i = 0; i < flota.length; i++) {
            if (flota[i].getNombre().equalsIgnoreCase(s)) {
                return i; // Se encontró el nombre en la posición i
            }
        }
        return -1; // Si no se encontró el nombre, se devuelve -1
	} 
	//Método que ordena por número de puntos de menor a mayor
	public static void ordenarPorPuntosBurbuja(Nave[] flota){ 
		boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < flota.length - 1; i++) {
                if (flota[i].getPuntos() > flota[i + 1].getPuntos()) {
                    // Intercambiar elementos
                    Nave temp = flota[i];
                    flota[i] = flota[i + 1];
                    flota[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
	} 
	//Método que ordena por nombre de A a Z
	public static void ordenarPorNombreBurbuja(Nave[] flota){
		boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < flota.length - 1; i++) {
                if (flota[i].getNombre().compareToIgnoreCase(flota[i + 1].getNombre()) > 0) {
                    // Intercambiar elementos
                    Nave temp = flota[i];
                    flota[i] = flota[i + 1];
                    flota[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
	} 
	//Método para buscar la primera nave con un nombre que se pidió por teclado
	public static int busquedaBinariaNombre(Nave[] flota, String s){ 
		ordenarPorNombreBurbuja(flota); // Se requiere que la lista esté ordenada para realizar la búsqueda binaria
        int low = 0;
        int high = flota.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            int comparison = flota[mid].getNombre().compareToIgnoreCase(s);
            if (comparison < 0) {
                low = mid + 1;
            } else if (comparison > 0) {
                high = mid - 1;
            } else {
                return mid; // Se encontró el nombre en la posición mid
            }
        }
        return -1; // Si no se encontró el nombre, se devuelve -1
	} 
	//Método que ordena por número de puntos de menor a mayor
	public static void ordenarPorPuntosSeleccion(Nave[] flota){ 
		for (int i = 0; i < flota.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < flota.length; j++) {
                if (flota[j].getPuntos() < flota[minIndex].getPuntos()) {
                    minIndex = j;
                }
            }
            // Intercambiar elementos
            Nave temp = flota[minIndex];
            flota[minIndex] = flota[i];
            flota[i] = temp;
        }
	} 
	//Método que ordena por nombre de A a Z
	public static void ordenarPorNombreSeleccion(Nave[] flota){
		 for (int i = 0; i < flota.length - 1; i++) {
	            int minIndex = i;
	            for (int j = i + 1; j < flota.length; j++) {
	                if (flota[j].getNombre().compareToIgnoreCase(flota[minIndex].getNombre()) < 0) {
	                    minIndex = j;
	                }
	            }
	            // Intercambiar elementos
	            Nave temp = flota[minIndex];
	            flota[minIndex] = flota[i];
	            flota[i] = temp;
	        }
	} 
	//Método que muestra las naves ordenadas por número de puntos de mayor a menor
	public static void ordenarPorPuntosInsercion(Nave[] flota){
		 for (int i = 1; i < flota.length; i++) {
	            Nave key = flota[i];
	            int j = i - 1;
	            while (j >= 0 && flota[j].getPuntos() < key.getPuntos()) {
	                flota[j + 1] = flota[j];
	                j = j - 1;
	            }
	            flota[j + 1] = key;
	        }
	} 
	//Método que muestra las naves ordenadas por nombre de Z a A
	public static void ordenarPorNombreInsercion(Nave[] flota){ 
		for (int i = 1; i < flota.length; i++) {
            Nave key = flota[i];
            int j = i - 1;
            while (j >= 0 && flota[j].getNombre().compareToIgnoreCase(key.getNombre()) < 0) {
                flota[j + 1] = flota[j];
                j = j - 1;
            }
            flota[j + 1] = key;
        }
	}


}
